<?phpnamespace Siarko\ActionRouting\Routing;use Siarko\ActionRouting\ActionProvider\Provider;use Siarko\ActionRouting\ActionProvider\RouteData;use Siarko\ActionRouting\ActionResult\AbstractActionResult;use Siarko\ActionRouting\Api\Routing\RouterInterface;use Siarko\ActionRouting\Routing\Matcher\MatcherInterface;use Siarko\ActionRouting\Routing\Matcher\UrlMatchResult;use Siarko\ActionRouting\Routing\Url\RequestDataProviderInterface;use Siarko\DependencyManager\Exceptions\CouldNotResolveNamespace;class Router implements RouterInterface{    /**     * @var array[]     */    private array $routes = [];    /**     * @param MatcherInterface $matcher     * @param RequestDataProviderInterface $requestDataProvider     * @param Provider $actionProvider     * @throws \ReflectionException     * @throws CouldNotResolveNamespace     */    public function __construct(        private readonly MatcherInterface             $matcher,        private readonly RequestDataProviderInterface $requestDataProvider,        protected readonly Provider                   $actionProvider    )    {        foreach ($this->actionProvider->getRoutes() as $routeData) {            $this->registerRoutes($routeData);        }    }    /**     * @return UrlMatchResult|null     */    public function match(): ?UrlMatchResult    {        $url = $this->requestDataProvider->getRequestUrl();        $method = $this->requestDataProvider->getRequestMethod();        return $this->getRoutingData($url, $method);    }    /**     * @param string $url     * @param Method $method     * @return UrlMatchResult|null     */    private function getRoutingData(string $url, Method $method): ?UrlMatchResult    {        $routes = array_key_exists($method->name, $this->routes) ? $this->routes[$method->name] : [];        foreach ($routes as $route => $routeData) {            /** @var UrlMatchResult|null $matchResult */            $matchResult = $this->matcher->_match($url, $route);            if ($matchResult !== null) {                $matchResult->setRouteData($routeData);                return $matchResult;            }        }        return null;    }    /**     * @param RouteData $routeData     */    public function registerRoutes(RouteData $routeData): void    {        foreach ($routeData->getRoutes() as $route) {            foreach ($route->getMethods() as $method) {                $this->routes[$method->name][$route->getPattern()] = $routeData;            }        }    }}