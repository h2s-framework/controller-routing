<?phpnamespace Siarko\ActionRouting\Routing;use Siarko\ActionRouting\ActionProvider\RouteData;use Siarko\ActionRouting\ActionResult\AbstractActionResult;use Siarko\ActionRouting\BuiltinAction\Action404Interface;use Siarko\ActionRouting\Routing\Matcher\MatcherInterface;use Siarko\ActionRouting\Routing\Matcher\UrlMatchResult;use Siarko\ActionRouting\Routing\Matcher\UrlMatchResultFactory;use Siarko\ActionRouting\Routing\Url\IRequestDataProvider;class Router implements IRouter {    /* @var MatcherInterface */    protected MatcherInterface $matcher;    /**     * @var array[]     */    private array $routes = [];    private string $notFoundAction;    /**     * @param IRequestDataProvider $requestDataProvider     * @param UrlMatchResultFactory $urlMatchResultFactory     * @param Action404Interface $action404     * @param MatcherInterface $matcher     */    public function __construct(        private readonly IRequestDataProvider $requestDataProvider,        private readonly UrlMatchResultFactory $urlMatchResultFactory,        Action404Interface $action404,        MatcherInterface $matcher,    ) {        $this->setMatcher($matcher);        $this->setNotFoundAction($action404::class, 'run');    }    /**     * @param string $className     * @param string $method     * @return void     */    public function setNotFoundAction(string $className, string $method): void    {        $this->notFoundAction = $className.'::'.$method;    }    /**     * @param MatcherInterface $matcher     */    public function setMatcher(MatcherInterface $matcher){        $this->matcher = $matcher;    }    /**     * @return AbstractActionResult     */    public function match(): UrlMatchResult    {        $url = $this->requestDataProvider->getRequestUrl();        $method = $this->requestDataProvider->getRequestMethod();        return $this->getRoutingData($url, $method);    }    /**     * @param string $url     * @param Method $method     * @return AbstractActionResult     */    private function getRoutingData(string $url, Method $method): ?UrlMatchResult    {        $routes = array_key_exists($method->name, $this->routes) ? $this->routes[$method->name] : [];        foreach ($routes as $route => $routeData) {            /** @var UrlMatchResult|null $matchResult */            $matchResult = $this->matcher->_match($url, $route);            if ($matchResult !== null) {                $matchResult->setRouteData($routeData);                return $matchResult;            }        }        $notFoundActionData = explode('::', $this->notFoundAction);        $result = $this->urlMatchResultFactory->create();        $result->setFullUrl($url);        $result->setRouteData(new RouteData(            [],            $notFoundActionData[0],            $notFoundActionData[1],            []        ));        return $result;    }    /**     * @param RouteData $routeData     */    public function registerRoutes(RouteData $routeData): void    {        foreach ($routeData->getRoutes() as $route) {            foreach ($route->getMethods() as $method) {                if(!array_key_exists($method->name, $this->routes)){ $this->routes[$method->name] = []; }                $this->routes[$method->name][$route->getPattern()] = $routeData;            }        }    }}